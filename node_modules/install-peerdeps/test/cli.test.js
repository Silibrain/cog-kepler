"use strict";

/**
 * Gets the resulting install command given the provided arguments
 * @async
 * @param {string[]} extraArgs - arguments to be passed to the CLI
 * @returns {Promise<string>} - a Promise which resolves to the resulting install command
 */
var getCliInstallCommand = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(extraArgs) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              // Always do dry run, so the command is the last line
              // outputted
              var cli = spawnCli(extraArgs.concat("--dry-run"));
              var lines = [];
              cli.stdout.on("data", function (data) {
                lines.push(data);
              });
              cli.on("close", function () {
                // The command will be the last line outputted by the cli
                // during a dry run
                resolve(lines[lines.length - 1]);
              });
              // Make sure to call reject() on error so that the Promise
              // doesn't hang forever
              cli.on("error", function (err) {
                return reject(err);
              });
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getCliInstallCommand(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _child_process = require("child_process");

var _tape = require("tape");

var _tape2 = _interopRequireDefault(_tape);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * Spawns the CLI with the provided arguments
 * @param {string[]} extraArgs - arguments to be passed to the CLI
 * @returns {ChildProcess} - an EventEmitter that represents the spawned child process
 */
function spawnCli(extraArgs) {
  return (0, _child_process.spawn)("node", ["--require", "babel-register", "cli.js"].concat(extraArgs));
}

(0, _tape2.default)("errors when more than one package is provided", function (t) {
  var cli = spawnCli(["eslint-config-airbnb", "angular"]);
  cli.on("exit", function (code) {
    // We should be able to do t.equal(code, 1), but earlier Node versions
    // handle uncaught exceptions differently so we can't (0.10 returns 8,
    // 0.12 returns 9).
    t.notEqual(code, 0, "Errored, exit code was " + code);
    t.end();
  });
});

(0, _tape2.default)("errors when no arguments are provided", function (t) {
  var cli = spawnCli();
  cli.on("exit", function (code) {
    t.notEqual(code, 0, "Errored, exit code was " + code);
    t.end();
  });
});

(0, _tape2.default)("errors when the package name argument is formatted incorrectly", function (t) {
  var cli = spawnCli("heyhe#@&*()");
  cli.on("exit", function (code) {
    t.notEqual(code, 0, "Errored, exit code was " + code);
    t.end();
  });
});

(0, _tape2.default)("only installs peerDependencies when `--only-peers` is specified", function (t) {
  getCliInstallCommand(["eslint-config-airbnb", "--only-peers"]).then(function (command) {
    t.equal(/\beslint-config-airbnb\b/.test(command), false);
    t.end();
  }, t.fail);
});

(0, _tape2.default)("adds an explicit `--no-save` when using `--silent` with NPM", function (t) {
  getCliInstallCommand(["eslint-config-airbnb", "--silent"]).then(function (command) {
    t.equal(/\b--no-save\b/.test(command), false);
    t.end();
  }, t.fail);
});

// @todo - tests for the actual install process
// see https://github.com/sindresorhus/has-yarn/blob/master/test.js for details
// Perhaps abstract the functionality of getting the package name
// into its own function, and test that

// Also see commander tests
// https://github.com/tj/commander.js/blob/master/test/test.arguments.js